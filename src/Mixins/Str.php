<?php


namespace CoolRunner\Utils\Mixins;

/**
 * Class Str
 *
 * @package CoolRunner\Utils\Mixins
 * @internal
 */
class Str
{
    public function utf8Encode()
    {
        return function ($body) {
            if (!function_exists('mb_convert_encoding')) {
                return $body;
            }

            $encoding = mb_detect_encoding($body);
            if ($encoding) {
                return mb_convert_encoding($body, 'UTF-8', $encoding);
            }

            return utf8_encode($body);
        };
    }

    public function replaceLastOccurrence()
    {
        return function ($search, $replace, $subject)
        {
            $pos = strrpos($subject, $search);
            if ($pos !== false) {
                $subject = substr_replace($subject, $replace, $pos, strlen($search));
            }

            return $subject;
        }

        ;
    }

    public function randomNumber()
    {
        return function ($digits = 6, $salt = null) {
            // More entropy - More secure - More better
            $generator = preg_replace('/[^0-9]/', '',
                hash_hmac(
                    'sha512',
                    (
                        rand(PHP_INT_MIN, PHP_INT_MAX) .
                        uniqid('otp-uniq-', true) .
                        env('APP_KEY') .
                        $salt
                    ),
                    rand(PHP_INT_MIN, PHP_INT_MAX)
                )
            );
            return substr($generator . $generator, rand(0, \Str::length($generator)), $digits);
        };
    }

    public function detectCsvDelimiter()
    {
        return function ($csv_string, array $delimiter_list = null) {
            $delimiter_list = $delimiter_list ?: [",", ";"];
            $delimiters = [];

            foreach ($delimiter_list as $delimiter) {
                $delimiters[$delimiter] = count(explode($delimiter, $csv_string));
            }

            asort($delimiters);

            return \Arr::last(array_keys($delimiters));
        };
    }

    public function isBase64()
    {
        return function (string $str): bool {
            if (base64_encode(base64_decode($str, true)) === $str) {
                return true;
            } else {
                return false;
            }
        };
    }

    public function randomString()
    {

        /**
         * The $characters can be one of following values:
         * - A predefined set (see below)
         * - A custom source string
         * - A callback generating the source string
         *
         * Predefined character sets:
         * - <code>alpha<code> - Letters (both upper and lower case)
         * - <code>num</code> - Numbers
         * - <code>alphanum</code> - Both of the above combined
         *
         *
         * @param int $length
         * @param null|string|Closure $characters Character set
         *
         * @return string A random string of the specified length
         * @author Morten K. Harders üê¢ <mh@coolrunner.dk>
         */
        return function (int $length, $characters = null): string {
            if ($characters === 'num') {
                $characters = '0123456789';
            } elseif ($characters === 'alpha') {
                $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            } elseif ($characters === 'alphanum') {
                $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            }

            if (!$characters) {
                $characters = function () {
                    $lower = 33;
                    $upper = 126;

                    $str = '';
                    for ($i = $lower; $i <= $upper; $i++) {
                        $str .= mb_chr($i, 'UTF-8');
                    }

                    return $str;
                };
            }

            $characters = value($characters);

            $str = '';
            do {
                $str .= $characters[rand(0, strlen($characters) - 1)];
            } while (strlen($str) < $length);

            return $str;
        };
    }

    public function normalize()
    {
        return function (string $string): string {
            $replace = array(
                '—ä' => '-',
                '–¨' => '-',
                '–™' => '-',
                '—å' => '-',
                'ƒÇ' => 'A',
                'ƒÑ' => 'A',
                '√Ä' => 'A',
                '√É' => 'A',
                '√Å' => 'A',
                '√Ü' => 'A',
                '√Ç' => 'A',
                '√Ö' => 'A',
                '√Ñ' => 'Ae',
                '√û' => 'B',
                'ƒÜ' => 'C',
                '◊•' => 'C',
                '√á' => 'C',
                '√à' => 'E',
                'ƒò' => 'E',
                '√â' => 'E',
                '√ã' => 'E',
                '√ä' => 'E',
                'ƒû' => 'G',
                'ƒ∞' => 'I',
                '√è' => 'I',
                '√é' => 'I',
                '√ç' => 'I',
                '√å' => 'I',
                '≈Å' => 'L',
                '√ë' => 'N',
                '≈É' => 'N',
                '√ò' => 'O',
                '√ì' => 'O',
                '√í' => 'O',
                '√î' => 'O',
                '√ï' => 'O',
                '√ñ' => 'Oe',
                '≈û' => 'S',
                '≈ö' => 'S',
                '»ò' => 'S',
                '≈†' => 'S',
                '»ö' => 'T',
                '√ô' => 'U',
                '√õ' => 'U',
                '√ö' => 'U',
                '√ú' => 'Ue',
                '√ù' => 'Y',
                '≈π' => 'Z',
                '≈Ω' => 'Z',
                '≈ª' => 'Z',
                '√¢' => 'a',
                '«é' => 'a',
                'ƒÖ' => 'a',
                '√°' => 'a',
                'ƒÉ' => 'a',
                '√£' => 'a',
                '«ç' => 'a',
                '–∞' => 'a',
                '–ê' => 'a',
                '√•' => 'a',
                '√†' => 'a',
                '◊ê' => 'a',
                '«∫' => 'a',
                'ƒÄ' => 'a',
                '«ª' => 'a',
                'ƒÅ' => 'a',
                '√§' => 'ae',
                '√¶' => 'ae',
                '«º' => 'ae',
                '«Ω' => 'ae',
                '–±' => 'b',
                '◊ë' => 'b',
                '–ë' => 'b',
                '√æ' => 'b',
                'ƒâ' => 'c',
                'ƒà' => 'c',
                'ƒä' => 'c',
                'ƒá' => 'c',
                '√ß' => 'c',
                '—Ü' => 'c',
                '◊¶' => 'c',
                'ƒã' => 'c',
                '–¶' => 'c',
                'ƒå' => 'c',
                'ƒç' => 'c',
                '–ß' => 'ch',
                '—á' => 'ch',
                '◊ì' => 'd',
                'ƒè' => 'd',
                'ƒê' => 'd',
                'ƒé' => 'd',
                'ƒë' => 'd',
                '–¥' => 'd',
                '–î' => 'D',
                '√∞' => 'd',
                '—î' => 'e',
                '◊¢' => 'e',
                '–µ' => 'e',
                '–ï' => 'e',
                '∆è' => 'e',
                'ƒô' => 'e',
                'ƒï' => 'e',
                'ƒì' => 'e',
                'ƒí' => 'e',
                'ƒñ' => 'e',
                'ƒó' => 'e',
                'ƒõ' => 'e',
                'ƒö' => 'e',
                '–Ñ' => 'e',
                'ƒî' => 'e',
                '√™' => 'e',
                '…ô' => 'e',
                '√®' => 'e',
                '√´' => 'e',
                '√©' => 'e',
                '—Ñ' => 'f',
                '∆í' => 'f',
                '–§' => 'f',
                'ƒ°' => 'g',
                'ƒ¢' => 'g',
                'ƒ†' => 'g',
                'ƒú' => 'g',
                '–ì' => 'g',
                '–≥' => 'g',
                'ƒù' => 'g',
                'ƒü' => 'g',
                '◊í' => 'g',
                '“ê' => 'g',
                '“ë' => 'g',
                'ƒ£' => 'g',
                '◊ó' => 'h',
                'ƒß' => 'h',
                '–•' => 'h',
                'ƒ¶' => 'h',
                'ƒ§' => 'h',
                'ƒ•' => 'h',
                '—Ö' => 'h',
                '◊î' => 'h',
                '√Æ' => 'i',
                '√Ø' => 'i',
                '√≠' => 'i',
                '√¨' => 'i',
                'ƒØ' => 'i',
                'ƒ≠' => 'i',
                'ƒ±' => 'i',
                'ƒ¨' => 'i',
                '–ò' => 'i',
                'ƒ©' => 'i',
                '«ê' => 'i',
                'ƒ®' => 'i',
                '«è' => 'i',
                '–∏' => 'i',
                'ƒÆ' => 'i',
                '◊ô' => 'i',
                '–á' => 'i',
                'ƒ™' => 'i',
                '–Ü' => 'i',
                '—ó' => 'i',
                '—ñ' => 'i',
                'ƒ´' => 'i',
                'ƒ≥' => 'ij',
                'ƒ≤' => 'ij',
                '–π' => 'j',
                '–ô' => 'j',
                'ƒ¥' => 'j',
                'ƒµ' => 'j',
                '—è' => 'ja',
                '–Ø' => 'ja',
                '–≠' => 'je',
                '—ç' => 'je',
                '—ë' => 'jo',
                '–Å' => 'jo',
                '—é' => 'ju',
                '–Æ' => 'ju',
                'ƒ∏' => 'k',
                '◊õ' => 'k',
                'ƒ∂' => 'k',
                '–ö' => 'k',
                '–∫' => 'k',
                'ƒ∑' => 'k',
                '◊ö' => 'k',
                'ƒø' => 'l',
                '≈Ä' => 'l',
                '–õ' => 'l',
                '≈Ç' => 'l',
                'ƒº' => 'l',
                'ƒ∫' => 'l',
                'ƒπ' => 'l',
                'ƒª' => 'l',
                '–ª' => 'l',
                'ƒΩ' => 'l',
                'ƒæ' => 'l',
                '◊ú' => 'l',
                '◊û' => 'm',
                '–ú' => 'm',
                '◊ù' => 'm',
                '–º' => 'm',
                '√±' => 'n',
                '–Ω' => 'n',
                '≈Ö' => 'n',
                '◊ü' => 'n',
                '≈ã' => 'n',
                '◊†' => 'n',
                '–ù' => 'n',
                '≈Ñ' => 'n',
                '≈ä' => 'n',
                '≈Ü' => 'n',
                '≈â' => 'n',
                '≈á' => 'n',
                '≈à' => 'n',
                '–æ' => 'o',
                '–û' => 'o',
                '≈ë' => 'o',
                '√µ' => 'o',
                '√¥' => 'o',
                '≈ê' => 'o',
                '≈è' => 'o',
                '≈é' => 'o',
                '≈å' => 'o',
                '≈ç' => 'o',
                '√∏' => 'o',
                '«ø' => 'o',
                '«í' => 'o',
                '√≤' => 'o',
                '«æ' => 'o',
                '«ë' => 'o',
                '∆°' => 'o',
                '√≥' => 'o',
                '∆†' => 'o',
                '≈ì' => 'oe',
                '≈í' => 'oe',
                '√∂' => 'oe',
                '◊§' => 'p',
                '◊£' => 'p',
                '–ø' => 'p',
                '–ü' => 'p',
                '◊ß' => 'q',
                '≈ï' => 'r',
                '≈ô' => 'r',
                '≈ò' => 'r',
                '≈ó' => 'r',
                '≈ñ' => 'r',
                '◊®' => 'r',
                '≈î' => 'r',
                '–†' => 'r',
                '—Ä' => 'r',
                '»ô' => 's',
                '—Å' => 's',
                '≈ú' => 's',
                '≈°' => 's',
                '≈õ' => 's',
                '◊°' => 's',
                '≈ü' => 's',
                '–°' => 's',
                '≈ù' => 's',
                '–©' => 'sch',
                '—â' => 'sch',
                '—à' => 'sh',
                '–®' => 'sh',
                '√ü' => 'ss',
                '—Ç' => 't',
                '◊ò' => 't',
                '≈ß' => 't',
                '◊™' => 't',
                '≈•' => 't',
                '≈£' => 't',
                '≈¢' => 't',
                '–¢' => 't',
                '»õ' => 't',
                '≈¶' => 't',
                '≈§' => 't',
                '‚Ñ¢' => 'tm',
                '≈´' => 'u',
                '—É' => 'u',
                '≈®' => 'u',
                '≈©' => 'u',
                '∆Ø' => 'u',
                '∆∞' => 'u',
                '≈™' => 'u',
                '«ì' => 'u',
                '≈≥' => 'u',
                '≈≤' => 'u',
                '≈≠' => 'u',
                '≈¨' => 'u',
                '≈Æ' => 'u',
                '≈Ø' => 'u',
                '≈±' => 'u',
                '≈∞' => 'u',
                '«ï' => 'u',
                '«î' => 'u',
                '«õ' => 'u',
                '√π' => 'u',
                '√∫' => 'u',
                '√ª' => 'u',
                '–£' => 'u',
                '«ö' => 'u',
                '«ú' => 'u',
                '«ô' => 'u',
                '«ó' => 'u',
                '«ñ' => 'u',
                '«ò' => 'u',
                '√º' => 'ue',
                '–≤' => 'v',
                '◊ï' => 'v',
                '–í' => 'v',
                '◊©' => 'w',
                '≈µ' => 'w',
                '≈¥' => 'w',
                '—ã' => 'y',
                '≈∑' => 'y',
                '√Ω' => 'y',
                '√ø' => 'y',
                '≈∏' => 'y',
                '≈∂' => 'y',
                '–´' => 'y',
                '≈æ' => 'z',
                '–ó' => 'z',
                '–∑' => 'z',
                '≈∫' => 'z',
                '◊ñ' => 'z',
                '≈º' => 'z',
                '≈ø' => 'z',
                '–ñ' => 'zh',
                '–∂' => 'zh'
            );
            return strtr($string, $replace);
        };
    }
}
